{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\solda\\\\Desktop\\\\nwitter\\\\src\\\\routes\\\\Auth.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { authService } from \"FB\"; // export default () => <span>Auth</span>\n// import\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Auth = () => {\n  _s();\n\n  // hook\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [newAccount, setNewAccout] = useState(true);\n\n  const onChange = event => {\n    // input이 변경되는 이벤트 발생\n    const {\n      target: {\n        name,\n        value\n      }\n    } = event;\n\n    if (name === \"email\") {\n      setEmail(value);\n    } else if (name === \"password\") {\n      setPassword(value);\n    }\n  };\n\n  const onSubmit = async event => {\n    event.preventDefault(); // 이벤트 발생 시 새로고침 방지\n\n    try {\n      let data;\n\n      if (newAccount) {\n        data = authService.createUserWithEmailAndPassword(email, password);\n      } else {\n        data = await authService.signInWithEmailAndPassword(email, password);\n      }\n\n      console.log(data);\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"email\",\n        type: \"email\",\n        placeholder: \"E-mail\",\n        required: true,\n        value: email // 키보드로 입력 받음\n        ,\n        onChange: onChange // 키를 누를 때마다(값이 바뀔 때마다) 호출하여 입력값을 저장\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"password\",\n        type: \"password\",\n        placeholder: \"Password\",\n        required: true,\n        value: password,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: newAccount ? \"Create Account\" : \"Log in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Continue with Google\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Continue with Github\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Auth, \"jEI6q7bHzdLnuK03A7/M+uEx+S4=\");\n\n_c = Auth;\nexport default Auth;\n\nvar _c;\n\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"sources":["C:/Users/solda/Desktop/nwitter/src/routes/Auth.js"],"names":["React","useState","authService","Auth","email","setEmail","password","setPassword","newAccount","setNewAccout","onChange","event","target","name","value","onSubmit","preventDefault","data","createUserWithEmailAndPassword","signInWithEmailAndPassword","console","log","error","message"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,IAA5B,C,CAEA;AAEA;;;;AACA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACf;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACO,UAAD,EAAaC,YAAb,IAA6BR,QAAQ,CAAC,IAAD,CAA3C;;AAEA,QAAMS,QAAQ,GAAIC,KAAD,IAAW;AACxB;AACA,UAAM;AACFC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR;AADN,QAEFH,KAFJ;;AAIA,QAAIE,IAAI,KAAK,OAAb,EAAsB;AAClBR,MAAAA,QAAQ,CAACS,KAAD,CAAR;AACH,KAFD,MAEO,IAAID,IAAI,KAAK,UAAb,EAAyB;AAC5BN,MAAAA,WAAW,CAACO,KAAD,CAAX;AACH;AACJ,GAXD;;AAaA,QAAMC,QAAQ,GAAG,MAAOJ,KAAP,IAAiB;AAC9BA,IAAAA,KAAK,CAACK,cAAN,GAD8B,CACN;;AACxB,QAAI;AACA,UAAIC,IAAJ;;AAEA,UAAIT,UAAJ,EAAgB;AACZS,QAAAA,IAAI,GAAGf,WAAW,CAACgB,8BAAZ,CAA2Cd,KAA3C,EAAkDE,QAAlD,CAAP;AACH,OAFD,MAEO;AACHW,QAAAA,IAAI,GAAG,MAAMf,WAAW,CAACiB,0BAAZ,CAAuCf,KAAvC,EAA8CE,QAA9C,CAAb;AACH;;AACDc,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACH,KATD,CASE,OAAOK,KAAP,EAAc;AACZF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACC,OAAlB;AACH;AACJ,GAdD;;AAgBA,sBACI;AAAA,4BACI;AAAM,MAAA,QAAQ,EAAER,QAAhB;AAAA,8BACI;AACI,QAAA,IAAI,EAAC,OADT;AAEI,QAAA,IAAI,EAAC,OAFT;AAGI,QAAA,WAAW,EAAC,QAHhB;AAII,QAAA,QAAQ,MAJZ;AAKI,QAAA,KAAK,EAAEX,KALX,CAKkB;AALlB;AAMI,QAAA,QAAQ,EAAEM,QANd,CAMwB;;AANxB;AAAA;AAAA;AAAA;AAAA,cADJ,eASI;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAC,UAA5B;AAAuC,QAAA,WAAW,EAAC,UAAnD;AAA8D,QAAA,QAAQ,MAAtE;AAAuE,QAAA,KAAK,EAAEJ,QAA9E;AAAwF,QAAA,QAAQ,EAAEI;AAAlG;AAAA;AAAA;AAAA;AAAA,cATJ,eAUI;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAEF,UAAU,GAAG,gBAAH,GAAsB;AAA5D;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAaI;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH,CAvDD;;GAAML,I;;KAAAA,I;AAwDN,eAAeA,IAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { authService } from \"FB\";\r\n\r\n// export default () => <span>Auth</span>\r\n\r\n// import\r\nconst Auth = () => {\r\n    // hook\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newAccount, setNewAccout] = useState(true);\r\n\r\n    const onChange = (event) => {\r\n        // input이 변경되는 이벤트 발생\r\n        const {\r\n            target: { name, value },\r\n        } = event;\r\n\r\n        if (name === \"email\") {\r\n            setEmail(value);\r\n        } else if (name === \"password\") {\r\n            setPassword(value);\r\n        }\r\n    };\r\n\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault(); // 이벤트 발생 시 새로고침 방지\r\n        try {\r\n            let data;\r\n\r\n            if (newAccount) {\r\n                data = authService.createUserWithEmailAndPassword(email, password);\r\n            } else {\r\n                data = await authService.signInWithEmailAndPassword(email, password);\r\n            }\r\n            console.log(data);\r\n        } catch (error) {\r\n            console.log(error.message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={onSubmit}>\r\n                <input\r\n                    name=\"email\"\r\n                    type=\"email\"\r\n                    placeholder=\"E-mail\"\r\n                    required\r\n                    value={email} // 키보드로 입력 받음\r\n                    onChange={onChange} // 키를 누를 때마다(값이 바뀔 때마다) 호출하여 입력값을 저장\r\n                />\r\n                <input name=\"password\" type=\"password\" placeholder=\"Password\" required value={password} onChange={onChange} />\r\n                <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Log in\"} />\r\n            </form>\r\n            <div>\r\n                <button>Continue with Google</button>\r\n                <button>Continue with Github</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default Auth;\r\n"]},"metadata":{},"sourceType":"module"}